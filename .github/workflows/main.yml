on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      - 'release-*'

name: Continuous integration

jobs:
  headers:
    name: License header check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install requirements
        run: |
          ! grep -R -L --exclude-dir=vendor \
            --include='*.py' --include='*.rs' --include='*.glade' --include='*.sh' \
            'Copyright Concurrent Technologies Corporation' *

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install requirements
        run: sudo apt-get install libdbus-1-dev
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install requirements
        run: sudo apt-get install libdbus-1-dev
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all

  py_build:
    name: Build Python Bindings
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install requirements
        run: |
          sudo apt-get update
          sudo apt-get install libgtk-3-dev
          sudo apt-get install libgirepository1.0-dev
          sudo apt-get install xvfb
          sudo apt-get install libdbus-1-dev
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Set up Rust Stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
      - name: Build
        id: build
        run: |
          pipenv run compile_catalog
          pipenv run python setup.py bdist_wheel
          echo ::set-output name=virt_env::$(pipenv --venv)
      - name: Archive wheel
        uses: actions/upload-artifact@v2
        with:
          name: fapolicy-analyzer-wheel
          path: dist/fapolicy_analyzer-*.whl

  ui_lint:
    name: UI Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        id: install_deps
        run: |
          python -m pip install --upgrade pip
          pip install flake8 flake8-i18n
      - name: Lint with flake8
        run: python -m flake8 ./fapolicy_analyzer

  ui_test:
    name: UI Test Suite
    needs: py_build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install requirements
        run: |
          sudo apt-get update
          sudo apt-get install libgtk-3-dev
          sudo apt-get install libgirepository1.0-dev
          sudo apt-get install xvfb
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install extra locales
        id: install_locales
        run: |
          sudo apt-get -y install locales
          sudo locale-gen es_ES.UTF-8
      - name: Install dependencies
        id: install_deps
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
          echo ::set-output name=virt_env::$(pipenv --venv)
      - name: Download bindings package
        id: download
        uses: actions/download-artifact@v2
        with:
          name: fapolicy-analyzer-wheel
          path: /tmp
      - name: Install wheel
        run: pipenv install /tmp/fapolicy_analyzer-*.whl
      - name: 'Update path'
        run: |
          for entry in ${{steps.download.outputs.download-path}}/fapolicy*;
            do echo "./$(basename $entry)" >> ${{steps.download.outputs.download-path}}/easy-install.pth;
          done
      - name: Test with pytest
        run: pipenv run test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install requirements
        run: sudo apt-get install libdbus-1-dev
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  contrib-readme-job:
    name: contributors - Automate contrib in readme
    runs-on: ubuntu-latest
      steps:
        - name: Contribute List
        - uses: akhilmhdh/contributors-readme-action@v2.3.3
          env:
             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
